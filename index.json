[{"categories":null,"contents":" Hello World A sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go Variables Normal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34; Shortcut:\nmsg := \u0026#34;Hello\u0026#34; Constants const Phi = 1.618 ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://yohanalexander.github.io/notes/go/basic/introduction/","summary":" Hello World A sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go Variables Normal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34; Shortcut:\nmsg := \u0026#34;Hello\u0026#34; Constants const Phi = 1.618 ","tags":null,"title":"Introduction"},{"categories":null,"contents":" Strings str := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string` Numbers Typical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.Println(\u0026#34;Value is\u0026#34;, b) func getPointer () (myPointer *int) { a := 234 return \u0026amp;a a := new(int) *a = 234 Pointers point to a memory location of a variable. Go is fully garbage-collected.\nType Conversion i := 2 f := float64(i) u := uint(i) Slice slice := []int{2, 3, 4} slice := []byte(\u0026#34;Hello\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://yohanalexander.github.io/notes/go/basic/types/","summary":"Strings str := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string` Numbers Typical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.","tags":null,"title":"Basic Types"},{"categories":null,"contents":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) Switch switch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default! fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() } Loop for count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;John\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.Printf(\u0026#34;At position %d, the character %s is present\\n\u0026#34;, i, val) n := 0 x := 42 for n != x { n := guess() } ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://yohanalexander.github.io/notes/go/basic/flow-control/","summary":"Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) Switch switch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default! fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() } Loop for count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;John\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.","tags":null,"title":"Flow Control"},{"categories":null,"contents":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://yohanalexander.github.io/notes/go/advanced/files/","summary":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) ","tags":null,"title":"File Manipulation"},{"categories":null,"contents":" Variable NAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://yohanalexander.github.io/notes/bash/basic/","summary":" Variable NAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","tags":null,"title":"Bash Variables"},{"categories":null,"contents":"This week the arrival of Github Copilot has caught the eyes of the software developer community by its rather impressive functioning although still imperfect, but was the community concerned as it should?\nMeet GitHub Copilot - your AI pair programmer. https://t.co/eWPueAXTFt pic.twitter.com/NPua5K2vFS\nâ€” GitHub (@github) June 29, 2021 OpenAI and GitHub have announced the technical preview of an AI that promises to be your new pair programmer. Copilot works as an extension to IDEs, so far compatible with VSCode, similar to IA-powered code completion tools like Tabnine, however with fundamental differences.\nHow does Copilot work? The tool is the result of an investment of [$1 billion](https://news.microsoft.com/2019/07/22/openai-forms-exclusive-computing-partnership-with-microsoft-to-build-new- azure-ai-supercomputing-technologies/) from Microsoft at OpenAI, a company specialized in the development and research of Artificial General Intelligence. \u0026ldquo;Copilot automatically fills in code snippets, suggests new lines, and can even write entire functions based on the description provided\u0026rdquo;, said Github CEO, Nat Friedman, in a [blog post](https://github. blog/2021-06-29-introducing-github-copilot-ai-pair-programmer/ \u0026ldquo;blog post\u0026rdquo;).\nAt its core, Copilot uses a new code generation algorithm from OpenAI called Codex. OpenAI CEO, Greg Brockman, describes it as a descendant of GPT-3, but with a focus on code generation. The Codex algorithm was trained on terabytes of public code extracted from GitHub and StackOverflow. This gives the tool the ability to write context-based code with unprecedented precision.\nYou can have fun with some AI suggestions for philosophical codes on Max Woolf\u0026rsquo;s blog post.\ndef should_terminate(Person): \u0026#34;\u0026#34;\u0026#34;Check whether a Person should be terminated\u0026#34;\u0026#34;\u0026#34; if Person.id \u0026gt; 10: #terminate return True else: #continue return False The Inevitability of Automation But are the intentions of Microsoft (a multi-billion dollar company) purely benevolent and pro-community? As much as a company is community-friendly, the principle of capitalism is profit, and the profit made by eliminating the highly skilled and expensive programmers outweigh any publicized friendly benefits.\nAt first you can reject the idea that your job is going to be taken over by a code-generating AI, after all a programmer had to create the AI code in the first place, right?\nWrong. We tend to stick to a comfortable lie to have a false sense of security, but in reality cognitive automation has been going on for a long time, as explained in this excellent video from CGP Grey channel.\n{% include video id=\u0026ldquo;7Pq-S557XQU\u0026rdquo; provider=\u0026ldquo;youtube\u0026rdquo; %}\nNo matter how specialized a workforce, it ends up being replaced, automation is inevitable. After all, no one needs a top-of-the-line solution 100% of the time, often a mid-range solution is enough. Several similar examples have already taken place, so in an era where code can be generated by AIs, entry into the workforce will become increasingly difficult.\nThe dystopian truth The parallel between the inevitability of automation and what the AI developed for Github Copilot represents is very well drawn in this video from the Fireship channel. And after analyzing the past, it becomes much harder to believe in an optimistic future.\n{% include video id=\u0026ldquo;4duqI8WyfqE\u0026rdquo; provider=\u0026ldquo;youtube\u0026rdquo; %}\nFor now, the tool will be used to help programmers perform their role better, but in the not-too-distant future AI will have learned and surpassed its own creators. Whether we are indeed \u0026ldquo;digging our own pits\u0026rdquo; toward a dystopian future for programming jobs, only time will tell.\nBut on the bright side we will have more free time \u0026#x1f604;\nFurther reading https://copilot.github.com/ https://github.blog/2021-06-29-introducing-github-copilot-ai-pair-programmer/ https://minimaxir.com/2021/06/gpt-j-6b/ https://thenewstack.io/github-copilot-a-powerful-controversial-autocomplete-for-developers/ https://towardsdatascience.com/should-we-be-worried-now-that-github-copilot-is-out-12f59551cd95 ","date":"July 2, 2021","hero":"/posts/github-copilot/head.png","permalink":"https://yohanalexander.github.io/posts/github-copilot/","summary":"This week the arrival of Github Copilot has caught the eyes of the software developer community by its rather impressive functioning although still imperfect, but was the community concerned as it should?\nMeet GitHub Copilot - your AI pair programmer. https://t.co/eWPueAXTFt pic.twitter.com/NPua5K2vFS\nâ€” GitHub (@github) June 29, 2021 OpenAI and GitHub have announced the technical preview of an AI that promises to be your new pair programmer. Copilot works as an extension to IDEs, so far compatible with VSCode, similar to IA-powered code completion tools like Tabnine, however with fundamental differences.","tags":["copilot","ai"],"title":"The Dystopian Truth About Github Copilot (Programmers Need Not Apply)"},{"categories":null,"contents":"Any developer who has spent the minimum amount of time browsing a repository\u0026rsquo;s history knows: commit messages are important.\nBut if this is a well-established truth, why does anyone who already has a certain level of experience with code versioning end up neglecting commit messages?\nAs with any good programming or code versioning practice, commit messages require awareness. And regardless of the seniority of the developer, there are factors that can hinder the writing of a good message.\nHurry the enemy of perfection It has to be deployed to production today\u0026hellip;\nLaziness You may be deluded by ideas like \u0026ldquo;these are just trivial changes\u0026rdquo;, \u0026ldquo;but nobody will read this later\u0026rdquo;, \u0026ldquo;everyone knows what I\u0026rsquo;m doing\u0026rdquo;.\nThe messages must adequately communicate the WHY a change has been made. Understanding that the history must remain with the context of each change that occurred, makes collaboration and development more efficient.\nLack of atomicity Do you know when you get so messed up when writing a message because nothing describes the full context of the change?\nCommits that encompass many changes are bad versioning practice, and the confusion in creating a message already indicates this. The logic of the changes must be divided into atoms, very simple units that implement a single functionality or correct a specific error. And commits are an instance of these changes, a simplified representation of what the complete logic represents.\nIn future posts I will talk about how to use GIT tool efficiently and to your advantage, exemplifying when, where and how to commit.\nImprudence You already know that it is important, you have the expertise of the tool, and yet you decide to do it wrong. shame on you\nWhy write an excellent commit message? But if you\u0026rsquo;re still not convinced why you should write such an excellent commit message, let\u0026rsquo;s recreate a common scenario in the developers careers.\nYou receive a medium priority demand from your PO with the \u0026ldquo;correct error in the user registration\u0026rdquo; task. Determined to solve the problem efficiently, you browse the repository to find the bug in the scope of the registration. To your surprise, the methods have no documentation, no tests, and you understand absolutely nothing about the diff of the modified files. The git blame points out that the last commit was made 1 month ago at 01:37 am on a Friday with the message \u0026ldquo;small changes\u0026rdquo;. After taking a deep breath for having your inner peace briefly shaken, you check the git log to understand the previous commits, and are faced with quite explicative messages such as \u0026ldquo;fixing a bug\u0026rdquo;, \u0026ldquo;adding method\u0026rdquo;, \u0026ldquo;making changes to the method\u0026rdquo;, \u0026ldquo;improving fixes\u0026rdquo;, and etc.\nA well thought commit message is the best way to communicate the context of a change, whether to other developers, or even to yourself in the future.\nBut how do you become an craftsman of commit messages? First of all, it is necessary to understand that excellent commit messages do not happen by chance. You will never come across an impeccable message history, where employees have not taken the necessary care with each of the commits. Excellence is the result of good practices applied daily.\nAnd to guide our practices, there are conventions and standards (each team must agree on what best suits their reality).\nConventional Commits Conventional Commits -or semantic commits- is a commit message convention, to help maintain an explicit and well-structured commit history. By following this type of convention, we can automate the creation of CHANGELOGs, facilitate the entry of new developers to the project, in addition to being able to understand where the hours of the project (in code refactoring, feature creation, or bug fixes).\nFor those who don\u0026rsquo;t know it yet, this is the standard form for a semantic commit:\n[type](optional scope): [subject] [optional body] [optional footer] A practical example:\nfix(containers/profile): adjust argument of getThumbnailImage function getThumbnailImage used to receive argument of type XPTO. Now receives the correct argument of type FOO. Solves issue #132 Types of commits The type of a commit is the initial description of what the commit is doing and there is a well-defined list:\ntest: indicates any type of code creation or changing test codes. Example: Creation of unit tests. feat: indicates the development of a new feature to the project. Example: Adding a service, functionality, endpoint, etc. refactor: used when there is refactoring of code that does not have any impact on the logic or business rules of the system. Example: Code changes after a code review. style: used when there are changes in formatting and style of the code that do not alter the system in any way. Example: Change the style-guide, fix indentations, remove whitespace, remove comments, etc. fix: used when correcting errors that are generating bugs in the system. Example: Apply treatment to a function that is not behaving as expected and returning an error. chore: indicates design changes that do not affect the system or test files. Example: Changing environment variables in .env files, adding more file extensions to .gitignore. docs: used when there are changes to the project documentation. Example: adding information in the API documentation, changing the README, etc. build: used to indicate changes that affect the project\u0026rsquo;s build process or external dependencies. Example: adding or removing dependencies from project requirements, etc. perf: indicates a change that improved the performance of the system. Example: changing ForEach for while, improving the query to the database, etc. ci: used for changes to CI configuration files. Example: Circle, Travis, BrowserStack, etc. revert: indicates the reversal of a previous commit. Commit scopes The scope of the commit is an optional part, short and easy to understand. This is where we will indicate which part of the code has been modified, such as a microservice layer for example. In general, the use of the scope is very generic, for example, being able to associate the numbering of tasks if your team follows some agile method.\nCommit body The body, will contain more accurate descriptions of what is contained in that commit, showing the reasons or consequences generated by this code.\nCommit footers The footer is restricted to changes in status, such as resolutions of the status of issues or association of a task. Example: \u0026ldquo;resolves issue #312\u0026rdquo;.\nCommit subject The subject -or message- is mandatory, and therefore is the most important part of the standard, and must be sufficiently clear as to why the changes in the commit. Remember that the diff of the changes tells you what has changed, but only the message efficiently represents the WHY of the changes.\nIn Chris Beams\u0026rsquo;s article 7 rules are also defined for a good message:\nSeparate subject from body with a blank line Limit the subject line to 50 characters Capitalize the subject line Do not end the subject line with a period Use the imperative mood in the subject line Wrap the body at 72 characters Use the body to explain what and why vs. how I am not going to delve into each rule, as most are already self-explanatory. But for some, rule 5, about writing the message in the imperative, generates a slight initial estrangement, because the change implemented was a \u0026ldquo;past action\u0026rdquo;, but when writing messages using the imperative mode we are saying what the commit does if applied.\nIf you were to make a cherry-pick (copy a commit from one branch to another) or a revert for example, that commit will \u0026ldquo;perform a task\u0026rdquo; not \u0026ldquo;performed a task\u0026rdquo;.\nThe golden rule is that the message must complete the sentence:\nIf applied, this commit will commit message here\ngit commit -m \u0026#34;\u0026lt;commit message here\u0026gt;\u0026#34; Finally, see the real example of a commit made to the core repository of Bitcoin:\ncommit eb0b56b19017ab5c16c745e6da39c53126924ed6 Author: Pieter Wuille \u0026lt;pieter.wuille@gmail.com\u0026gt; Date: Fri Aug 1 22:57:55 2014 +0200 Simplify serialize.h\u0026#39;s exception handling Remove the \u0026#39;state\u0026#39; and \u0026#39;exceptmask\u0026#39; from serialize.h\u0026#39;s stream implementations, as well as related methods. As exceptmask always included \u0026#39;failbit\u0026#39;, and setstate was always called with bits = failbit, all it did was immediately raise an exception. Get rid of those variables, and replace the setstate with direct exception throwing (which also removes some dead code). As a result, good() is never reached after a failure (there are only 2 calls, one of which is in tests), and can just be replaced by !eof(). fail(), clear(n) and exceptions() are just never called. Delete them. Further reading How to Write a Git Commit Message On Commit Messages A Note About Git Commit Messages Commit Guidelines Keep Your Commits \u0026ldquo;Atomic\u0026rdquo; Conventional Commits Keep a Changelog ","date":"April 30, 2021","hero":"/posts/commit-messages/git-commit.png","permalink":"https://yohanalexander.github.io/posts/commit-messages/","summary":"Any developer who has spent the minimum amount of time browsing a repository\u0026rsquo;s history knows: commit messages are important.\nBut if this is a well-established truth, why does anyone who already has a certain level of experience with code versioning end up neglecting commit messages?\nAs with any good programming or code versioning practice, commit messages require awareness. And regardless of the seniority of the developer, there are factors that can hinder the writing of a good message.","tags":["git"],"title":"Commit messages are underestimated (and shouldn't be)"},{"categories":null,"contents":"Welcome to my blog!\nIn the end of 2020 and this bizarre situation that the world started to face I decided to start writing a blog.\nThe main idea is to share any insigth or interesting technology I discovered while working on various projects.\nPosts about new tools and technologies are likely to be shorter to keep things straight, and in a format similar to tutorials, to show the reader the way to get the same results I did.\nEventually Iâ€™ll also talk more openly on more theoretical issues, such as good programming practices and the challenges on designing scalable software, in addition to information security and data science.\nIn a next post I will talk about how I built the entire infrastructure for making this blog available, so that the writing is minimalist and quite simple.\n","date":"January 18, 2021","hero":"/posts/hello-world/hello.png","permalink":"https://yohanalexander.github.io/posts/hello-world/","summary":"Welcome to my blog!\nIn the end of 2020 and this bizarre situation that the world started to face I decided to start writing a blog.\nThe main idea is to share any insigth or interesting technology I discovered while working on various projects.\nPosts about new tools and technologies are likely to be shorter to keep things straight, and in a format similar to tutorials, to show the reader the way to get the same results I did.","tags":null,"title":"Welcome to my blog!"}]