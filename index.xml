<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Seamless Coder</title><link>https://yohanalexander.github.io/</link><description>Recent content on Seamless Coder</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 02 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://yohanalexander.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>The Dystopian Truth About Github Copilot (Programmers Need Not Apply)</title><link>https://yohanalexander.github.io/posts/github-copilot/</link><pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate><guid>https://yohanalexander.github.io/posts/github-copilot/</guid><description>This week the arrival of Github Copilot has caught the eyes of the software developer community by its rather impressive functioning although still imperfect, but was the community concerned as it should?
Meet GitHub Copilot - your AI pair programmer. https://t.co/eWPueAXTFt pic.twitter.com/NPua5K2vFS
â€” GitHub (@github) June 29, 2021 OpenAI and GitHub have announced the technical preview of an AI that promises to be your new pair programmer. Copilot works as an extension to IDEs, so far compatible with VSCode, similar to IA-powered code completion tools like Tabnine, however with fundamental differences.</description></item><item><title>Commit messages are underestimated (and shouldn't be)</title><link>https://yohanalexander.github.io/posts/commit-messages/</link><pubDate>Fri, 30 Apr 2021 00:00:00 +0000</pubDate><guid>https://yohanalexander.github.io/posts/commit-messages/</guid><description>Any developer who has spent the minimum amount of time browsing a repository&amp;rsquo;s history knows: commit messages are important.
But if this is a well-established truth, why does anyone who already has a certain level of experience with code versioning end up neglecting commit messages?
As with any good programming or code versioning practice, commit messages require awareness. And regardless of the seniority of the developer, there are factors that can hinder the writing of a good message.</description></item><item><title>Welcome to my blog!</title><link>https://yohanalexander.github.io/posts/hello-world/</link><pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate><guid>https://yohanalexander.github.io/posts/hello-world/</guid><description>Welcome to my blog!
In the end of 2020 and this bizarre situation that the world started to face I decided to start writing a blog.
The main idea is to share any insigth or interesting technology I discovered while working on various projects.
Posts about new tools and technologies are likely to be shorter to keep things straight, and in a format similar to tutorials, to show the reader the way to get the same results I did.</description></item><item><title>Introduction</title><link>https://yohanalexander.github.io/notes/go/basic/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yohanalexander.github.io/notes/go/basic/introduction/</guid><description> Hello World A sample go program is show here.
package main import &amp;#34;fmt&amp;#34; func main() { message := greetMe(&amp;#34;world&amp;#34;) fmt.Println(message) } func greetMe(name string) string { return &amp;#34;Hello, &amp;#34; + name + &amp;#34;!&amp;#34; } Run the program as below:
$ go run hello.go Variables Normal Declaration:
var msg string msg = &amp;#34;Hello&amp;#34; Shortcut:
msg := &amp;#34;Hello&amp;#34; Constants const Phi = 1.618</description></item><item><title>Basic Types</title><link>https://yohanalexander.github.io/notes/go/basic/types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yohanalexander.github.io/notes/go/basic/types/</guid><description>Strings str := &amp;#34;Hello&amp;#34; Multiline string
str := `Multiline string` Numbers Typical types
num := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(&amp;#39;a&amp;#39;) // byte (alias for uint8) Other Types
var u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.</description></item><item><title>Flow Control</title><link>https://yohanalexander.github.io/notes/go/basic/flow-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yohanalexander.github.io/notes/go/basic/flow-control/</guid><description>Condition if day == &amp;#34;sunday&amp;#34; || day == &amp;#34;saturday&amp;#34; { rest() } else if day == &amp;#34;monday&amp;#34; &amp;amp;&amp;amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(&amp;#34;Uh oh&amp;#34;) Switch switch day { case &amp;#34;sunday&amp;#34;: // cases don&amp;#39;t &amp;#34;fall through&amp;#34; by default! fallthrough case &amp;#34;saturday&amp;#34;: rest() default: work() } Loop for count := 0; count &amp;lt;= 10; count++ { fmt.Println(&amp;#34;My counter is at&amp;#34;, count) } entry := []string{&amp;#34;Jack&amp;#34;,&amp;#34;John&amp;#34;,&amp;#34;Jones&amp;#34;} for i, val := range entry { fmt.</description></item><item><title>File Manipulation</title><link>https://yohanalexander.github.io/notes/go/advanced/files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yohanalexander.github.io/notes/go/advanced/files/</guid><description> Condition if day == &amp;#34;sunday&amp;#34; || day == &amp;#34;saturday&amp;#34; { rest() } else if day == &amp;#34;monday&amp;#34; &amp;amp;&amp;amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(&amp;#34;Uh oh&amp;#34;)</description></item><item><title>Bash Variables</title><link>https://yohanalexander.github.io/notes/bash/basic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yohanalexander.github.io/notes/bash/basic/</guid><description> Variable NAME=&amp;#34;John&amp;#34; echo $NAME echo &amp;#34;$NAME&amp;#34; echo &amp;#34;${NAME} Condition if [[ -z &amp;#34;$string&amp;#34; ]]; then echo &amp;#34;String is empty&amp;#34; elif [[ -n &amp;#34;$string&amp;#34; ]]; then echo &amp;#34;String is not empty&amp;#34; fi</description></item></channel></rss>